<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[C-Tone Homepage]]></title><link>https://creamidea.github.io/</link><atom:link href="https://creamidea.github.io/static/rss2.xml" rel="self" type="application/rss+xml"/><description><![CDATA[思考/笔记/翻译/技术/think/note/translation/technology]]></description><pubDate>Thu, 10 Nov 2016 03:53:49 GMT</pubDate><generator>http://orgmode.org/</generator><item><title><![CDATA[Works]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>emacs,orgmode</category><link>https://creamidea.github.io/static/html/wiki/works.html</link><guid>X297244dd375d00bb470dc055f99ecfde9aa57da4</guid><pubDate>Sun, 09 Oct 2016 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: emacs,orgmode
Content: * 前言  业余前端开发，干过一段时间监控。学艺不精，目前待业在家。]]></description><comments>https://creamidea.github.io/static/html/wiki/works.html#outline_disqus_thread</comments></item><item><title><![CDATA[Friends]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>friends-link,friends</category><link>https://creamidea.github.io/static/html/wiki/friends.html</link><guid>X3f0cc623b47b06e625b4a9f163917f6acecc783e</guid><pubDate>Sat, 26 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Thu, 20 Oct 2016 15:44:30 GMT</lastBuildDate><description><![CDATA[Tags: friends-link,friends
Content: * 前言  收集一些自己认为好的友链，自认为。如果不想出现在这里可以私信我 >_< \\  当然也很热烈欢迎各po主主动交换链接啦 ｖ（＾＿＾ｖ）♪ \\  排名不分先后]]></description><comments>https://creamidea.github.io/static/html/wiki/friends.html#outline_disqus_thread</comments></item><item><title><![CDATA[Programming With ZooKeeper]]></title><author>蜂蜜甜甜圈(Yi Ou)</author><category>zookeeper,java,tutorial</category><link>https://creamidea.github.io/static/html/translation/Zookeeper-Programming.html</link><guid>X64f6da490bc0cc43bffc4740f73122fe7fb49825</guid><pubDate>Fri, 05 Feb 2016 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: zookeeper,java,tutorial
Content: * 序这是一篇关于快速入门ZooKeeper开发的翻译文章。 \\[[https://cwiki.apache.org/confluence/display/ZOOKEEPER/Tutorial][原文]] [[http://www.cnblogs.com/haippy/archive/2012/07/23/2604556.html][参考-1]] [[http://ifeve.com/zookeeper-apache/][参考-2]]]]></description><comments>https://creamidea.github.io/static/html/translation/Zookeeper-Programming.html#outline_disqus_thread</comments></item><item><title><![CDATA[Usage with React Router]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>reactjs,js,react-router</category><link>https://creamidea.github.io/static/html/translation/Usage-With-React-Router.html</link><guid>X1e7bf36610dddae877d51334ce590879bff9e299</guid><pubDate>Fri, 14 Oct 2016 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: reactjs,js,react-router
Content: * 序之前看到了一下 [[http://redux.js.org/][官网]] 对于 React 的介绍，感觉写的很好，本来想全文翻译的，但是国人已经翻译过了，而且做的更好。所以这里就只贴一下地址。+ [[http://cn.redux.js.org/index.html][Redux 中文文档]]其中我翻译的+ [[http://cn.redux.js.org/docs/advanced/UsageWithReactRouter.html][搭配 React Router]]欢迎各位查看指正。也欢迎各位继续为其中文翻译添砖加瓦。以上。]]></description><comments>https://creamidea.github.io/static/html/translation/Usage-With-React-Router.html#outline_disqus_thread</comments></item><item><title><![CDATA[Storm Tutorial]]></title><author>蜂蜜甜甜圈(Yi Ou)</author><category>storm,tutorial,java</category><link>https://creamidea.github.io/static/html/translation/Storm-Tutorial.html</link><guid>X3f1412481d0823f68f1c628875110533228af11b</guid><pubDate>Tue, 22 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: storm,tutorial,java
Content: * 序这是一篇关于Storm教程的翻译文章。 \\[[http://storm.apache.org/tutorial.html][旧原文]](据此翻译) [[http://storm.apache.org/releases/current/Tutorial.html][新原文]] [[http://ifeve.com/getting-started-with-stom-index/][参考]]]]></description><comments>https://creamidea.github.io/static/html/translation/Storm-Tutorial.html#outline_disqus_thread</comments></item><item><title><![CDATA[Unicode and UTF8]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>unicode,utf8,encoding,编码</category><link>https://creamidea.github.io/static/html/articles/Unicode-And-UTF8.html</link><guid>Xf5e8786583ea031ceca3528f809279850300a081</guid><pubDate>Sat, 05 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: unicode,utf8,encoding,编码
Content: * 前言#+BEGIN_QUOTE终于在杭州看到一场像样子的雪了。<2015-12-05 Sat>#+END_QUOTE最近明明事情很多，但是就是什么事情都不想干，这个是为什么呢？没事干，就去折腾一些并没有什么用的东西。这不，花了一个周末，看了一些关于编码方面的文章。下面就是我的一些理解和笔记。很肤浅，只是一个很简单的介绍文章，详细的你可以阅读 [[Reference]] 中前几篇文章。]]></description><comments>https://creamidea.github.io/static/html/articles/Unicode-And-UTF8.html#outline_disqus_thread</comments></item><item><title><![CDATA[This Site]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>orgmode,emacs,github-page,github,blog,design,jekyll,static-blog</category><link>https://creamidea.github.io/static/html/articles/This-Site.html</link><guid>X8e1c391af8efc272eb399fc86f6493445e892316</guid><pubDate>Sun, 27 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: orgmode,emacs,github-page,github,blog,design,jekyll,static-blog
Content: * 前言#+BEGIN_QUOTE时光飞逝，岁月如染。#+END_QUOTE是的，你没有看错，我又重新设计了一下自己的知识书写系统。荒废了好多年之后，又回到了这里。最近遇到一些事情感触挺大的。感觉一年过去了，自己也贬值了许多。我也不知道说什么好，于是我又开始折腾起自己写字的地方。也许是想找一个地方慢慢的度过这么多时光吧。这么说真是暴殄天物啊！！到现在已经工作差不多一年多了。我成长了多少呢？我感觉我是没有什么实质性的进展，仍然像一个刚刚毕业的学生。技能上也么有什么大的提升，被人说成刚刚入门。嗯，就是刚刚入门嘛～]]></description><comments>https://creamidea.github.io/static/html/articles/This-Site.html#outline_disqus_thread</comments></item><item><title><![CDATA[Tex Cookie]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>emacs,latex</category><link>https://creamidea.github.io/static/html/articles/TeX-Cookie.html</link><guid>X44414941f46a0b9591f1d06b77107187e68a906d</guid><pubDate>Tue, 09 Apr 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: emacs,latex
Content: * 序章久闻TeX[fn:1]的大名，去年的某个时候还稍微接触了一下，但是毕竟当时不懂什么，而且还有许多的其他事情需要去做，并且感觉还用不到，于是也没有继续深入下去。不过我现在我感觉使用Org-mode记录笔记之后，是时候再次来看看这个软件了。其实我现在的想法很简单，将所有基础的环境搭建好。那么以后在学习新知识，做项目的时候就不会像现在这么仓促了。一个记录笔记，写文档的利器: =org-mode=,再加上文档排版软件TeX，感觉够用了。嗯，就是这样子的。那么就在最近开始学习吧。发现的一个学习 TeX的中[[http://latex.yo2.cn/][TeX的中文网站]]文网站 ，先Mark一下。还有就是专业的TeX Users Group[fn:2], 简称TUG[fn:2].以及tex的 [[http://tex.stackexchange.com/][Tex StackExchange]]。本文写于: 2013-04-09]]></description><comments>https://creamidea.github.io/static/html/articles/TeX-Cookie.html#outline_disqus_thread</comments></item><item><title><![CDATA[Shell Cookies]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>shell,emacs,etags</category><link>https://creamidea.github.io/static/html/articles/Shell-Cookie.html</link><guid>X1249ec83b48e921be25d0a32f393787723909522</guid><pubDate>Sun, 27 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: shell,emacs,etags
Content: * 前言一些常用的命令，包括使用Emacs的小技巧。]]></description><comments>https://creamidea.github.io/static/html/articles/Shell-Cookie.html#outline_disqus_thread</comments></item><item><title><![CDATA[A RequireJS, Backbone and Bower Starter Template]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>javascript,bower,backbone,requirejs</category><link>https://creamidea.github.io/static/html/articles/RequireJS-Backbone-Bower.html</link><guid>X9fd77c24c9ba7fc7ec1af4a388344153efd8b41b</guid><pubDate>Wed, 14 Aug 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: javascript,bower,backbone,requirejs
Content: * 前言这个是是一篇简单的参考文档，方便以后自己的回忆。主要参考的是这个视频：A RequireJS, Backbone, and Bower Starter Template[fn:1]，来自于这篇文章：[[http://net.tutsplus.com/tutorials/javascript-ajax/a-requirejs-backbone-and-bower-starter-template/][A RequireJS, Backbone, and Bower Starter Template]]]]></description><comments>https://creamidea.github.io/static/html/articles/RequireJS-Backbone-Bower.html#outline_disqus_thread</comments></item><item><title><![CDATA[Preload Javascript]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>js,javascript,preload,fetch,XMLHttpRequest,defer,prerender,prefetch</category><link>https://creamidea.github.io/static/html/articles/Preload-Javascript.html</link><guid>X9a66dd5384e8bc2ac58b31c9480d48250eb5cb9c</guid><pubDate>Sat, 29 Oct 2016 08:00:00 GMT</pubDate><lastBuildDate>Tue, 08 Nov 2016 08:21:55 GMT</lastBuildDate><description><![CDATA[Tags: js,javascript,preload,fetch,XMLHttpRequest,defer,prerender,prefetch
Content: * 前言主要介绍几种解决预加载 JS 文件的方案：异步请求 JS 文件，顺序执行 JS 代码。首先，让我们美好的设想一下：#+BEGIN_SRC jsvar script = document.createElement("script")script.noexecute = truescript.src = "xxxx.js"document.body.appendChild(script)script.execute()#+END_SRC但这个梦想有一个残酷的现实：如果你使用 =script= 引入的 JS 代码，那么，一旦浏览器下载完成，就会立即 *执行* 。不过留给你任何犹豫的时间。所以，上面只是一个美好的设想，无法将JS的加载和执行的过程割裂开来（通过 =script= 标签引入）。况且，现实中不存在这个 =noexecute= 和 =execute= 。不过，我们可以使用现有的一些技术组合创造出这种效果来。]]></description><comments>https://creamidea.github.io/static/html/articles/Preload-Javascript.html#outline_disqus_thread</comments></item><item><title><![CDATA[Org-mode And GTD]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>emacs,orgmode,GTD</category><link>https://creamidea.github.io/static/html/articles/Orgmode-And-GTD.html</link><guid>X545e6443df114b6d5a460be27dd99588ec0fe49b</guid><pubDate>Wed, 18 Nov 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: emacs,orgmode,GTD
Content: * 序章    Getting Things Done 中文翻译本《尽管去做：无压工作的艺术》是美国的商业顾问David Allen提倡的一种提高生产效率的系统。  利用GTD可以缓解压力，使心情平静，专心地工作，学习。（如果之前没有这么做过的话，是需要一段的时间训练才能掌握的。）    David Allen的第二部著作Ready for Anything 中文翻译本《结果第一：平衡工作和生活的52条原则》。  戴维从一个更宽泛的角度来看待工作与生活的平衡问题，不只是局限于GTD。    然而，这些我都没有看过。    *如果想高效地使用GTD系统需要掌握以下的方法*- *系统* 中收集你所关心的和必须要做的所有事情。这个系统包括物理的实体（或者可以表现的东西），纸，E-Mail，邮件，笔记等。- 准备一个 *收集箱* 放入任何关心的内容。收集箱可以是一个文件盒，邮件客户端程序，语言邮件或者是一个笔记本等。- 定期地将关心的事情收集整理的 工作流。通常需要每天执行。- Next Action（下一步的工作）阶段，为了容易地执行任务，用明确的动词定义目地和行为。- 基于具体的情境（Contexts），时间等，在合适的分类构造中组织管理提示和信息。这样的系统结构中包含日历，备忘录，文件整理系统等。- 大概每天或者一周一次回顾，从而保证你的“委托”和“任务”保持最新状态。- 定义并执行项目，自然而然地形成一个任务计划模型。  掌握好上面的要义，然后严格要求去执行即可。你的生活会变得“美好”。]]></description><comments>https://creamidea.github.io/static/html/articles/Orgmode-And-GTD.html#outline_disqus_thread</comments></item><item><title><![CDATA[Orgmode And Deckjs]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>emacs,org-mode,deck.js</category><link>https://creamidea.github.io/static/html/articles/Orgmode-And-Deckjs.html</link><guid>X0ad96b230332151741afd6807d28155791dc4554</guid><pubDate>Sun, 27 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: emacs,org-mode,deck.js
Content: * 前言有一次翻 *org-mode* 的官方文档，无意中发现了这篇文章 [[http://orgmode.org/worg/exporters/ox-overview.html][The New Org-mode Exporter Framework]] 。看到了deck.js[fn:1]，于是开始觊觎org-mode导出web slide的功能。之前一直不知道怎么搞，因为自己当时不会 *elisp* ，也看不懂deck.js[fn:1]。什么都不会。但是我就是想搞出这个。当时的内心是奔腾的。最近，由于看了一些elisp的基础知识，对于org-mode的publish的配置也做了一些了解。于是，开始了这次的折腾。期间，走了很多的弯路，主要是org-mode的发布模块做了改动，然后ox-deck我找到的是老版本，不匹配，于是跑不起来。还好，最后解决了。废话不说了，我们开始吧。]]></description><comments>https://creamidea.github.io/static/html/articles/Orgmode-And-Deckjs.html#outline_disqus_thread</comments></item><item><title><![CDATA[OE And NK]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>emacs,orgmode,静态博客,blog,static-blog</category><link>https://creamidea.github.io/static/html/articles/OE-NK.html</link><guid>Xc669c451411f7f4a8a8aaca6e973b352835db292</guid><pubDate>Sun, 27 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: emacs,orgmode,静态博客,blog,static-blog
Content: * 前奏最近闲着无聊，感觉也没有什么特别的事情要干，于是又回到了整博客上了。一开始的时候，也没有想要做成什么样子，只是自己写写字的地方。用orgmode来写文章，写好之后导出。加一点点js和css让其变得好看一点。就是这么简单。但是后来发现，需要维护2个库（一个是文章的库，另一个是导出的库），提交成本有点高，于是想写一个shell脚本，简单处理一下即可。不过，写好之后测试发现，是同步提交的。这就意味着，必须提交完成之后才能进行下一个。这个可是忍不了的，虽然解决了之前手动敲2遍命令的麻烦，可是依然很耗时。尤其是在 *大天朝* 。没有办法，只能使用更加高级的脚本来解决。最初的想法是想用 *Python* 来搞定的，但是发现自己大部分Python语法已然忘记。自己现在会的只有一点点JavaScript，哈哈哈，大笑3声之后，用起了node。一开始的时候，只是简单的一个js脚本，创建2个线程，写好测试成功。心里很是满意。没过一分钟，突然想到预览的时候使用的是一行Python命令 =python -m SimpleHTTPServer 8080= 来起的服务器。何不将这个合并到之前脚本中去呢？于是....]]></description><comments>https://creamidea.github.io/static/html/articles/OE-NK.html#outline_disqus_thread</comments></item><item><title><![CDATA[My First Article]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>design,感想</category><link>https://creamidea.github.io/static/html/articles/My-First-Article.html</link><guid>Xb2ae04e9c718558344e03530fb53c260411dc905</guid><pubDate>Thu, 07 Feb 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: design,感想
Content: * 前言很高兴你能看我的第一篇文章，虽然以前也写过一些东西，但是始终觉得只是小打小闹，没有任何技术blog的意味，一度让我不知所错。而这次在github上搭建的blog可以说是一个时代的结束，一个全新的开始。虽然我现在还是不知道如何写出一篇高质量的blog，但是我还是想先写一篇: Hello, world.]]></description><comments>https://creamidea.github.io/static/html/articles/My-First-Article.html#outline_disqus_thread</comments></item><item><title><![CDATA[Learning Japanese 2 （整理归纳）]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>language,japanese</category><link>https://creamidea.github.io/static/html/articles/Learning-Japanese-2.html</link><guid>X8fa93c7c15b581ee479f9e68361b73487cabfbd6</guid><pubDate>Sun, 07 Apr 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: language,japanese
Content: * COMMENT 第何課]]></description><comments>https://creamidea.github.io/static/html/articles/Learning-Japanese-2.html#outline_disqus_thread</comments></item><item><title><![CDATA[Learning Japanese 1 （新日标）]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>language,japanese</category><link>https://creamidea.github.io/static/html/articles/Learning-Japanese-1.html</link><guid>X13b8b342a8397178a9f07864475d87d6c0d20760</guid><pubDate>Sun, 07 Apr 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: language,japanese
Content: * 前言上学期期末的时候，受同宿舍小杰同学的影响，开始看日本动漫，发现日本二维动漫做的的确不错。忽略某些日本动漫，大部分日本动漫做的的确不错。这个产业如同那些西方欧美国家的电视剧和电影制作一样，完全产业化，链条上的每一方都是可以从中获利。扯远了，其实我只是慢慢地发现日语其实也是值得去学习一下的。嗯，就是这个样子。算到现在以《新版 标准本日语》这本教材为准的话，那么现在（<2013-04-08 月曜日>）已经学习到第五课了。感觉当初那个学习日语的激情正在慢慢减弱，为了防止自己虎头蛇尾，现在开始写这个笔记。记录每一课的主要语法和一些说日语的习惯。另外关于生词我会不定期贴在每课的后面。这篇日记也会不定期的更新。]]></description><comments>https://creamidea.github.io/static/html/articles/Learning-Japanese-1.html#outline_disqus_thread</comments></item><item><title><![CDATA[Learning Django]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>python,django</category><link>https://creamidea.github.io/static/html/articles/Learning-Django.html</link><guid>X0810344bb194bbbe1dd61e94d81320c7b80cc050</guid><pubDate>Sun, 14 Apr 2013 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: python,django
Content: * 前言  上面分配的新的学习内容，学习这个框架，然后使用的参考书籍是 *Django Book 2 中文版* 。  下载地址是：[[http://vdisk.weibo.com/s/xy74T][微盘]]  无论有任何想法或者我文章中有任何错误，欢迎在下面留言或者通过电子邮件联系我：）  <2013-09-28 Sat> 再次学习]]></description><comments>https://creamidea.github.io/static/html/articles/Learning-Django.html#outline_disqus_thread</comments></item><item><title><![CDATA[Learning CSS]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>CSS,css</category><link>https://creamidea.github.io/static/html/articles/Learning-CSS.html</link><guid>X1d338624263a0beed3e191464d6c8325b47ea83c</guid><pubDate>Sat, 25 May 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: CSS,css
Content: * 前言  CSS，现在让我既爱你又恨你啊。  到现在终于将[[http://www.amazon.com/CSS-Definitive-Guide-Eric-Meyer/dp/0596527330][CSS: The Definitive Guide(3rd Edition)]]初略的浏览了一遍。  不能说很熟悉，但是感觉对于CSS有了进一步的了解，尤其是对于布局方面。  虽然我现在仍然不能单独写出很好的CSS布局以及细节的排版等等（这句简直是废话），  虽然我现在仍然需要借助像[[http://twitter.github.io/bootstrap/][Bootstrap]] 这样的库，  但是我想……  实话是我仍然不了解CSS。现在只能稍微梳理一下今天看的书的知识点。但愿可以……]]></description><comments>https://creamidea.github.io/static/html/articles/Learning-CSS.html#outline_disqus_thread</comments></item><item><title><![CDATA[Jump Links And Viewport Position]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>css,links,viwport-position</category><link>https://creamidea.github.io/static/html/articles/Jump-Links-And-Viewport-Position.html</link><guid>X1e7b37bbe2ce07c07a6815eedbf4011bcef8be74</guid><pubDate>Sun, 27 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: css,links,viwport-position
Content: * 前言  最近写主页的时候配到一个问题，如可控制HTML中的锚点跳转之后的对象的位置。  比如我点击了一个标题，我希望这个跳转过去的标题能够距离顶部一段距离。]]></description><comments>https://creamidea.github.io/static/html/articles/Jump-Links-And-Viewport-Position.html#outline_disqus_thread</comments></item><item><title><![CDATA[JavaScript Cookie]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>javascript,generate-function,yield,yield*</category><link>https://creamidea.github.io/static/html/articles/JavaScript-Cookie.html</link><guid>X494ba994124c9be02994f1feb7b022cfda0feea9</guid><pubDate>Sat, 30 Jan 2016 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: javascript,generate-function,yield,yield*
Content: * 前言记录一些关于JavaScript有趣的，迷惑的，让人惊叹的功能和陷阱。(⌒▽⌒)]]></description><comments>https://creamidea.github.io/static/html/articles/JavaScript-Cookie.html#outline_disqus_thread</comments></item><item><title><![CDATA[Install Something]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>emacs,orgmode,install</category><link>https://creamidea.github.io/static/html/articles/Install-Something.html</link><guid>X4275c7215a50652823d7a347813594e66edae078</guid><pubDate>Sun, 27 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: emacs,orgmode,install
Content: * 前言  这个是我的一个配置环境的wiki，主要记录我这些年安装的软件和配置的一些服务。  主要是在Windows7上和Linux(现在主要是Ubuntu)上。  详细记录一些配置过程和安装的软件。方便以后重新安装系统。]]></description><comments>https://creamidea.github.io/static/html/articles/Install-Something.html#outline_disqus_thread</comments></item><item><title><![CDATA[Archlinux With Windows7 (hard disk installation media)]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>linux,arch,archlinux,install,gtk,gnome-terminal,wifi-menu,boot,grub4dos</category><link>https://creamidea.github.io/static/html/articles/Install-Arch.html</link><guid>X8dae30d443559b06157d8fa6d894523bf021b439</guid><pubDate>Tue, 22 Mar 2016 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: linux,arch,archlinux,install,gtk,gnome-terminal,wifi-menu,boot,grub4dos
Content: * 前言最近要离职了(2016/04/05正式离职)，公司将收回配置的 *Macbook Air* 。于是，我无聊得开始安装起 *Linux* ，选择了好久（选择综合恐惧症），最后选择了 *Arch Linux* 。找了好久的 *Arch Wiki* 都没有找到通过硬盘来安装的方式。于是，我决定自己试试看。还好，网上有许多的资料可以参考。我结合自己实际操作和资料整理如下：]]></description><comments>https://creamidea.github.io/static/html/articles/Install-Arch.html#outline_disqus_thread</comments></item><item><title><![CDATA[How To Install Autocomplete and Yanisppet]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>orgmode,emacs,autocomplete,yanisppet</category><link>https://creamidea.github.io/static/html/articles/How-To-Install-Autocomplete-And-Yasnippet.html</link><guid>X29a91594b310585cefa8899ed0f73cab40534d00</guid><pubDate>Sat, 06 Apr 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: orgmode,emacs,autocomplete,yanisppet
Content: * 前言写这篇blog主要是测试一些网络服务，如图片服务和音乐链接服务。当然写这个还是因为我敬爱的小杰同学的要求。作为刚刚入门的New Emacser，我感觉是时候给他一些好玩的插件了。当然我这些步骤google一下全部会出来，但是作为要求还是写这篇blog吧。]]></description><comments>https://creamidea.github.io/static/html/articles/How-To-Install-Autocomplete-And-Yasnippet.html#outline_disqus_thread</comments></item><item><title><![CDATA[HTTP Caching]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>http,cache,cache-control,etag</category><link>https://creamidea.github.io/static/html/articles/HTTP-Caching.html</link><guid>Xb45e0bc0b924bb6e586d46952505685588705a4e</guid><pubDate>Sun, 23 Oct 2016 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: http,cache,cache-control,etag
Content: * 前言最近重新设计和实现了个人站点的博客，主要侧重提升舒适度上（加载速度，渲染速度，文字排版等）。在一期完成之后，用 Google 提供的测试工具 [[https://developers.google.com/speed/pagespeed/insights/][Insights]] 测试了一下，提示 *Leverage browser caching* 。于是看到了这篇文章 [[https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching][HTTP Caching]] （[[https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn][中文翻译]]） 。个人感觉是自己看过最好的一篇介绍缓存的文章，而且内容不是很多。当然前提是你有一定的缓存知识储备。]]></description><comments>https://creamidea.github.io/static/html/articles/HTTP-Caching.html#outline_disqus_thread</comments></item><item><title><![CDATA[HTML5 Video Blob 初探]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>html5,video,blob,js,MediaSource,createObjectURL,mp4,flv</category><link>https://creamidea.github.io/static/html/articles/HTML5-Video-Blob.html</link><guid>Xa805c78e0037fbb8a63ab9da022b27dacc87f036</guid><pubDate>Wed, 19 Oct 2016 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: html5,video,blob,js,MediaSource,createObjectURL,mp4,flv
Content: * 前言现在看到任何我感兴趣的网页都会习惯性的打开调试工具，看看其代码写的怎么样。有一天，看到了这句 HTML。#+BEGIN_SRC html<video src="blob:http://www.bilibili.com/d0823f0f-2b2a-4fd6-a93a-e4c82173c107"></video>#+END_SRC为何会有一个 blob？这个是什么？然后我点击这个链接，被返回了 404！什么情况？用了什么黑科技？一个个问题从脑海中蹦出来。于是对此做了一番探索。]]></description><comments>https://creamidea.github.io/static/html/articles/HTML5-Video-Blob.html#outline_disqus_thread</comments></item><item><title><![CDATA[HHKB GET]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>HHKB,感想</category><link>https://creamidea.github.io/static/html/articles/HHKB-GET.html</link><guid>X8842fb8df1115ee1aba69a8dfd10d1c08992b4bb</guid><pubDate>Fri, 25 Oct 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: HHKB,感想
Content: * 前言我是故意将这篇文章推到第一篇的，实际编写日期为2013-10-25。为何我会将其放到这里呢？本来在这个站点不会出现任何关于人类情绪的文字和记述，但是今天实在是太激动了，以至于我不得不在这里留下只言片语来记载我心中最开心的时刻。现在是<2013-10-25 14:16 Fri>。入手了一台HHKB Type-S 无刻。我也没有想到会这么快就得到了这个神器（其实也不是很快，整整花了我9天的光景）。多亏了 [[http://blog.jonewang.com/pages/about/][JoneWang]] 的帮忙，才使我能够顺利的获得这个东西。本来以为我可以压制住这种莫名的兴奋感，但是我失败。HHKB是如此的优秀（只是我个人的感受，希望不要）,真的让我爱不释手。嗯，决定了，以后本体就是你啦。好的，今天就暂时写到这里，明天继续吧。]]></description><comments>https://creamidea.github.io/static/html/articles/HHKB-GET.html#outline_disqus_thread</comments></item><item><title><![CDATA[Google Translation API Analysis]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>google-translate</category><link>https://creamidea.github.io/static/html/articles/Google-Translate-RESTful-API.html</link><guid>X40d1e85e6f65553e3ecea4b741ef548a12807716</guid><pubDate>Sun, 08 May 2016 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: google-translate
Content: * 前言  为了实现一个本地单词测试系统 [[https://github.com/creamidea/MemorizingWords][MemorizingWords]] （大致就是给定单词读音，用户反应出该单词的拼写和意思，然后校验）。  加之，之前我是一名标准的 Google 脑残粉，遂，研究 Google-Translate 网站的前端代码。分析出翻译和语音 API。  希望可以获取到相关的数据。  Google 的所有页面都是经过压缩的，HTML 页面也不例外。研究的时候异常艰难。  在研究相关的 JS 代码的时候，也是运气好，被我碰到了。对于这种排查接口的行为我总结出了一个经验，  可以通过搜索 =XMLHttpRequest= ，迅速定位到数据入口。之后打断点跟踪。如果当时没有找到这个，我不知道我还能不能找出这些数据。  还有，Google 在接口方面还是做了一点功课的，比如获取数据接口需要加上一个 *Token*, 这个 Token 是用 JS 前端生成的。  没有这个 Token，就无法正常获取数据。这个我后面会详细讲。  *接口随时可能失效，请自行探索或者邮件我协助处理。*  好的，让我们开始吧。]]></description><comments>https://creamidea.github.io/static/html/articles/Google-Translate-RESTful-API.html#outline_disqus_thread</comments></item><item><title><![CDATA[Git Cookie]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>git</category><link>https://creamidea.github.io/static/html/articles/Git-Cookie.html</link><guid>X924e14145a5d40c5dde3ca0eef6322bdda3d0352</guid><pubDate>Sun, 27 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: git
Content: * 前言一些关于 *git* 的小知识。用于git问题收集。]]></description><comments>https://creamidea.github.io/static/html/articles/Git-Cookie.html#outline_disqus_thread</comments></item><item><title><![CDATA[GWT ABC]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>google,gwt,java</category><link>https://creamidea.github.io/static/html/articles/GWT-ABC.html</link><guid>X6b260308b5ec20e25d7cbde527680a11bda34ce2</guid><pubDate>Wed, 29 Jan 2014 08:00:00 GMT</pubDate><lastBuildDate>Thu, 03 Nov 2016 06:37:04 GMT</lastBuildDate><description><![CDATA[Tags: google,gwt,java
Content: * 前言又这个样子混过去好多天啦。不过挖的坑始终是要来填的。话说不知道为何对GWT有如此的好感。（这个是为什么呢？难道是因为Google？这不过科学啊）[[http://www.gwtproject.org/][GWT(Google Web Tookit)]]，Google推出的一款使用Java主打的前端编程工具套件。当初我也不知道有这个东西，还是一位 [[https://twitter.com/au9ustine][@au9ustine]] 学长推荐的。可惜当初什么都不懂，看到又是以Java来开发的，当时就不知所措了。于是就一直搁置在那里了。不过心中还是痒痒的。这不在寒假学车期间顺便玩了一下这个工具。好有爱啊。]]></description><comments>https://creamidea.github.io/static/html/articles/GWT-ABC.html#outline_disqus_thread</comments></item><item><title><![CDATA[Development In Zhisheng]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>javascript,python,django,css,mysql</category><link>https://creamidea.github.io/static/html/articles/Development-In-Zhisheng.html</link><guid>Xe76c98aa66c40837fa9bc54972b182d21617b128</guid><pubDate>Thu, 09 May 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: javascript,python,django,css,mysql
Content: * 前言  开发日志]]></description><comments>https://creamidea.github.io/static/html/articles/Development-In-Zhisheng.html#outline_disqus_thread</comments></item><item><title><![CDATA[How To Create Article Contents By JS And CSS]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>javascript,css</category><link>https://creamidea.github.io/static/html/articles/Create-Article-Contents-By-JS-and-CSS.html</link><guid>Xb7874a030002d4d44b90ecebaa4faf2a03b0b319</guid><pubDate>Wed, 13 Feb 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: javascript,css
Content: * 前言  在搭建此次博客时，很想用javascript生成文章的目录，方便阅读，本来自己写了一个，  不过看到 [[http://beiyuu.com/][BeiYuu]] 的文章 [[http://beiyuu.com/why-blog/][《我为什么写博客？》]] 的文章目录时，  感觉自己写得没有他的好，于是参考他写的，写了下面的文章内容。]]></description><comments>https://creamidea.github.io/static/html/articles/Create-Article-Contents-By-JS-and-CSS.html#outline_disqus_thread</comments></item><item><title><![CDATA[CSS Animation: display]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>css,animation,display</category><link>https://creamidea.github.io/static/html/articles/CSS-Animation.html</link><guid>Xd5c4176a3a10c4b0f8dd93f35e95ffe295bb4aab</guid><pubDate>Sun, 27 Dec 2015 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: css,animation,display
Content: * 前言  元素消失的动画]]></description><comments>https://creamidea.github.io/static/html/articles/CSS-Animation.html#outline_disqus_thread</comments></item><item><title><![CDATA[C And C++ Cookie]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>c,CPlusPlus,cpp,learning</category><link>https://creamidea.github.io/static/html/articles/C-And-C++-Cookie.html</link><guid>Xc8608422a97d43f548b7914e05bc7489fe0b4af8</guid><pubDate>Mon, 22 Apr 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: c,CPlusPlus,cpp,learning
Content: * 前言  好的，匆忙地学习完ARM之后，立即转战C++学习。真是有意思的安排啊。おもしろい。 \\  那么我们就开始记录吧。原本这个是写于 *2013-04-22* 的笔记。  由于最近想看一下 *node* 的源码，所以，这个笔记又被翻出来啦。  ]]></description><comments>https://creamidea.github.io/static/html/articles/C-And-C++-Cookie.html#outline_disqus_thread</comments></item><item><title><![CDATA[Buffalo WHR-G300N V2]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>router,openwrt,buffalo</category><link>https://creamidea.github.io/static/html/articles/Buffalo-WHR-G300N-V2.html</link><guid>Xd928db56f067423af6f194d18067bea1f1ae93b7</guid><pubDate>Mon, 27 Jun 2016 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: router,openwrt,buffalo
Content: * 前言想在路由器上面做一些文章的，但是最后还是失败了。感觉投入的时间太多了，要收一下。现在记录之前的探索路程，为后续有时间的时候再来搞起。话不多说，直接上步骤。]]></description><comments>https://creamidea.github.io/static/html/articles/Buffalo-WHR-G300N-V2.html#outline_disqus_thread</comments></item><item><title><![CDATA[Browser and Server Sync (Polling, Comet, Long Polling, WebSocket)]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>polling,commet,long-polling,websocket,nodejs,javascript,coffeescript,python</category><link>https://creamidea.github.io/static/html/articles/Browser-and-Server-Sync.html</link><guid>X05721342beeb0308b10b711324ff2a787e95eb60</guid><pubDate>Tue, 30 Jul 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: polling,commet,long-polling,websocket,nodejs,javascript,coffeescript,python
Content: * 前言    这只是一篇简单介绍浏览器与服务器之间的实时数据交换的方法。  在客户端使用的是 [[http://coffeescript.org/][coffeescript]] ，接触下来感觉这种语法还是不错的，  然后在学习的过程中，貌似coffeescript借鉴了许多 [[http://www.ruby-lang.org/en/][Ruby]] 的语法，  所以接下来我准备去看看Ruby，当然这个是题外话啦。  一旦接受了coffeescript这种设定，还是很带感的。    然后服务器用的是 [[http://www.python.org/][python]] 的 [[http://flask.pocoo.org/][Flask]] 这一WEB框架以及 [[http://nodejs.org/][nodejs]]    主要参考的是：[[http://www.josephj.com/entry.php?id%3D358][Browser 與 Server 持續同步的作法介紹 (Polling, Comet, Long Polling, WebSocket)]]  ]]></description><comments>https://creamidea.github.io/static/html/articles/Browser-and-Server-Sync.html#outline_disqus_thread</comments></item><item><title><![CDATA[A New Design]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>jekyll,org-mode,design</category><link>https://creamidea.github.io/static/html/articles/A-New-Design.html</link><guid>X68972d4834ba05778316a749a800fe2b0d04d3e8</guid><pubDate>Fri, 05 Apr 2013 08:00:00 GMT</pubDate><lastBuildDate>Sun, 23 Oct 2016 15:09:58 GMT</lastBuildDate><description><![CDATA[Tags: jekyll,org-mode,design
Content: * 前言在本学期开学的时候看到了Emacs的Org-mode[fn:1]感觉很是神奇啊，根据官方文档到介绍，这个是写笔记，写文档，写TODO的利器啊。于是就只能硬着头皮看这些英文了。虽然有些地方不是很理解，但是大概意思还是可以看懂的。而且我觉得这个本来就是一个需要时间积累的东西，在接下来的日子中好好熟悉他吧。前段时间在github上搭建了一个Jekyll的博客，使用的是Markdown这一标记语言，感觉使用起来很是顺手，不过有时候感觉在生成Html的时候会生成错误，格式完全不正确。不过这些不是重点。重点是我现在看到了Org-mode[fn:1],这个从Emacs23开始被集成进包中一起分发的插件，我感觉有必要去玩一下。另外我也看到了有人结合Org-mode和Jekyll来写blog，比如在org-mode官网上的这篇文章[[http://orgmode.org/worg/org-tutorials/org-jekyll.html][Using org to Blog with Jekyll]]中提到的[[http://www.ian-barton.com][ian-bartn]] 他的blog。我就是跟着其一步一步来实现的，下面我详细说明一些细节。其实也是需要我记住到一些注意点。当然我还参考了这些网站:1. Publishing Org-mode files to HTML[fn:2]2. The Org Manual[fn:3]3. Hello Worg, the Org-Mode Community![fn:4]4. The 10 best fonts from the Google Webfonts Directory[fn:5]5. ian-barton.com[fn:7]6. 12个醒目的水平布局网站设计[fn:6]]]></description><comments>https://creamidea.github.io/static/html/articles/A-New-Design.html#outline_disqus_thread</comments></item><item><title><![CDATA[Orgmode HTML-Export Settings]]></title><author>冰糖火箭筒(Junjia Ni)</author><category>emacs,orgmode,lazy-load,image,mathjax,html-export</category><link>https://creamidea.github.io/static/html/articles/Orgmode-HTML-Export-Settings.html</link><guid>X118d7709b6a9c26d8cc67cf5ad3a52073bd146eb</guid><pubDate>Fri, 28 Oct 2016 08:00:00 GMT</pubDate><lastBuildDate>Wed, 09 Nov 2016 12:36:45 GMT</lastBuildDate><description><![CDATA[Tags: emacs,orgmode,lazy-load,image,mathjax,html-export
Content: * 前言配置 org-mode，使其成为静态 HTML 生成工具。实现类似于 [[http://jekyllrb.com/][Jekyll]] 的效果。]]></description><comments>https://creamidea.github.io/static/html/articles/Orgmode-HTML-Export-Settings.html#outline_disqus_thread</comments></item></channel></rss>