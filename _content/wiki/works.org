#+TITLE: Works
#+DATE: 2016-10-09
#+CATEGORY: wiki
#+DESCRIPTION: Works
#+KEYWORDS: emacs,orgmode
#+OPTIONS: H:4 num:t toc:t \n:nil @:t ::t |:t ^:nil f:t tex:t email:t <:t date:t timestamp:t
#+LINK_HOME: https://creamidea.github.io
#+STARTUP: showall


* 前言
  业余前端开发，干过一段时间监控。学艺不精，目前待业在家。

* Keyboard-js
** 项目地址
   - [[https://github.com/creamidea/keyboard-js][Github]]
** 项目成员
   + [[https://github.com/creamidea][Junjia Ni]]
** 项目描述
   一个用 Javascript 实现的键盘组合键的库。用于实现类似于 Gmail 邮箱内快捷的效果。[[https://creamidea.github.io/keyboard-js/][体验地址]]  \\
   目前暂时只支持组合键触发的功能。连续按击的功能暂时还没有实现（比如，连续按2次A可以触发页面跳转等。）
** 难点和收获
   最初是看到这个 [[http://stackoverflow.com/a/12444641/1925954][答案]] ，萌生了写一个组合键的库，方便任意页面实现组合键的功能。还有一点就是被答主的答题思路给震惊，悄悄地学习了一下。
   #+BEGIN_QUOTE
   That isn't the most readable snippet. Readability's important, so you could try something like this to make it easier on the eyes.
   #+END_QUOTE
   非常好的思路，将规则”可视化“了，便于人阅读和理解。有兴趣可以去看看这个 [[http://stackoverflow.com/a/12444641/1925954][答案]] 以及答案下面的评论。

   其实核心思想就是将规则可迭代化，每次检测的时候遍历之。匹配触发回调，不匹配则继续，直到结束。
   然后这个思路不仅仅被我用在键盘组合键功能的实现上，还用在了一个小型前端路由的实现上。（参考[[https://github.com/creamidea/creamidea.github.com/blob/master/web-src/index.js][代码]]）

   这个真是状态机的优美实现之一。

* 基于 Web 技术的多屏控制系统 (C/S)
** 项目地址
   - Alibaba-Group
** 项目成员
   + [[https://github.com/creamidea][Junjia Ni]]

** 项目描述
   ⽤户通过管理界⾯，实现对多块屏幕的显示控制系统。
   - Server 服务端是⼀个Node应⽤，具备⾼并发的能⼒。通过Websocket和客户端建⽴通信。使⽤ MongoDB 存储结构化数据。
   - Client 客户端是⼀个 ChromeApp。使⽤ React 框架构建，可以快速开发⾃定义形式的数据展示界⾯。
   - View ⽤户界⾯，使⽤ Angular 框架构建。提供⽤户管理系统的界⾯，显示系统运⾏情况。

** 难点和收获
   开发这套系统，使用了当时最新的前端开发技术。新手入门，好多坑啊。那段时间几乎每天都要写代码、研究代码到好晚。其实也是自己作。
   现在来看过去，觉得最惨的就是没有用 [[https://github.com/babel/babel][babel/babel]] 编译工具，而是使用了 [[https://github.com/google/traceur-compiler][google/traceur-compiler]] ，浪费了好多时间。
   （现在已经好久没有更新了。啊，滚滚的历史长河水。）
   但具体有哪些坑呢？容我想想。

   那段时间感觉整天都在写 *JS* , *JS* 的姿势水平有了很大的提高。有什么提高呢？感觉开始喜欢 *HTML* (开个玩笑)。

   主要提高点个人感觉在熟悉程度上，你问我这个有什么用？ ，╮(╯▽╰)╭ 母鸡
   - Chrome App/Extension API 熟悉程度
   - Nodejs/Koajs 服务端开发熟练度，尤其是对于 *流* 、 *中间件* 和所谓的 *面向切片编程* 的理解
   - WebSocket 协议
   - MongoDB 熟悉程度
   - ES6:yield 等新特性的熟悉程度。（可以参考这篇：[[file+emacs:../articles/JavaScript-Cookie.org][JavaScript-Cookie]]）

* 基于 Midway 的报表展示系统 (B/S)
** 项目地址
   - Alibaba-Group
** 项目成员
   + BeiFeng
   + HuanTong
   + [[http://zhuyongnan.cn/][Yongnan Zhu]]
   + [[https://github.com/creamidea][Junjia Ni]]

** 项目描述
   ⽤户通过⾃定义数据源、⾃定义图表样式和显示布局，⾃动⽣成报表， 并⽀持订阅、管理等功能的系统。
   前端用 *Nodejs* 渲染，后端 *Java* 处理具体的业务逻辑。数据库使用了集团统一的数据库池。

** 难点和收获
   当时碰到的一个最头疼的问题就是登陆问题，内部所有有页面的应用都要接入 *统一接入层* （现在怎么样了呢？）。
   理论上来讲，使用其相应的 *客户端SDK* 就可以很快接入。
   嗯，事实也是这个样子的，后端通过提供的 *java-sdk* 很快完成接入（有多快？取决于开发者的能力）。
   但是，现在有了一层渲染层。用户请求是先经过这个渲染层，之后再到达 java 处理逻辑。
   后端是被剥夺了页面渲染能力的，也就是说不能直接给用户提供登陆页面。而 nodejs 层的认证信息又不能直接给 java， 因为 java 不认。

   于是，我开启了我的作死技能。研究统一接入层的协议，自己模拟这个过程。来欺骗后端的 java。顺带看完了 java-sdk 的实现。
   由于是公司内部系统，具体细节不能透露。我只能给一个通用的流程图。

   #+CAPTION: User Login
   [[glfs:user-login.png]]

   另外，差点死在了 Koajs 的异步上，不过最后明白了 co-yield 的实现，也就没有什么问题了。

   最后就是做好备份和监控。

* 智能⻝⽤菌养殖监控系统
** 项目地址
   - [[https://github.com/creamidea/Mushroom/][Source Code]]

** 项目成员
   + [[https://github.com/ahappyforest][Peng Liu]]
   + [[https://github.com/JohnChain][JohnChain]]
   + [[https://github.com/creamidea][Junjia Ni]]

** 项目描述
   ⻝⽤菌养殖环境的 *控制* 、 *管理* 、 *展示* 系统。主要分成 *硬件层-控制决策层-显示层* 。 \\
   + 硬件层：将各传感器采集上来的数值转发给控制决策层；执⾏指令，控制硬件设备⼯作。（PLC/C/Lua）
   + 控制决策层：接收并存储上传的传感器数值；分析数据并⾃动下发控制命令，调节养殖室环境。(Python)
   + 显示层：可视化当前养殖室内环境状况；提供相应的管理界⾯供养殖⼈员实时调控。(Django)
   我在其中主要负责显示层功能的实现 \\

** 难点和收获
   (⊙o⊙)？，难点？那就是太年轻了。这个是大学毕设，当时什么都不懂，却又是一副很了不起的样子。嗯，就是这个样子。
   如果说开来，那就是一段好长好长的回忆啦。改天写（嗯，对，这个就是我新挖的坑。）

   期间遇到的问题都记录成 [[https://github.com/creamidea/Mushroom/issues][issues]] 了。搞的最头疼的就是这个了 [[https://github.com/creamidea/Mushroom/issues/68][issue#68]] 。
   做完这个项目， *Python* 的姿势水平有了很大的提高。嗯，具体是什么提高呢？我也忘了。

* 尾声
  还未结束。
